import jax.numpy as jnp
from typing import Any, Tuple

# Represents a JAX dtype, can be a specific type like jnp.int32 or a more generic jnp.dtype
DType = Any 

class FieldDescriptor:
    """
    Describes a field in an xtructure_data class, specifying its JAX dtype,
    a default fill value, and its intrinsic (non-batched) shape.
    This allows for auto-generation of the .default() classmethod.
    """
    def __init__(self, dtype: DType, intrinsic_shape: Tuple[int, ...] = (), fill_value: Any = None):
        """
        Initializes a FieldDescriptor.

        Args:
            dtype: The JAX dtype of the field (e.g., jnp.int32, jnp.float32).
            fill_value: The default value to fill the field's array with 
                        (e.g., -1, 0.0).
            intrinsic_shape: The shape of the field itself, before any batching.
                             Defaults to () for a scalar field.
        """
        self.dtype: DType = dtype
        # Set default fill values based on dtype
        if fill_value is None:
            if hasattr(dtype, 'dataclass'):
                # Handle xtructure_dataclass types
                self.fill_value = fill_value
            elif jnp.issubdtype(dtype, jnp.unsignedinteger):
                # For unsigned integers, use -1 (which wraps to max value)
                self.fill_value = -1
            elif jnp.issubdtype(dtype, jnp.integer) or jnp.issubdtype(dtype, jnp.floating):
                # For signed integers and floats, use infinity
                self.fill_value = jnp.inf
            else:
                # For other types, keep None
                self.fill_value = fill_value
        else:
            # Use the explicitly provided fill_value
            self.fill_value = fill_value
        self.intrinsic_shape: Tuple[int, ...] = intrinsic_shape

    def __repr__(self) -> str:
        return f"FieldDescriptor(dtype={self.dtype}, fill_value={self.fill_value}, intrinsic_shape={self.intrinsic_shape})"

# Example usage (to be placed in your class definitions later):
#
# from Xtructure.field_descriptors import FieldDescriptor
#
# @xtructure_data
# class MyData:
#     my_scalar_int: FieldDescriptor(jnp.int32, fill_value=-1)
#     my_vector_float: FieldDescriptor(jnp.float32, fill_value=0.0, intrinsic_shape=(10,))
#     # ... other fields
#
#     # The .default() method would be auto-generated by @xtructure_data
#     # using these descriptors. 